<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>©Jason Ai</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Use Inter font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Use Inter as the default font */
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Simple CSS loading spinner */
        .loader {
            border: 4px solid #f3f3f3; /* Light grey */
            border-top: 4px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 32px;
            height: 32px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center p-4">

    <!-- Main App Card -->
    <div class="bg-white rounded-xl shadow-2xl p-6 sm:p-8 w-full max-w-2xl">

        <!-- Header -->
        <header class="text-center mb-6">
            <h1 class="text-3xl sm:text-4xl font-bold text-blue-600">
                ©Jason Ai
            </h1>
            <p class="text-gray-500 mt-1">Powered by Gemini</p>
        </header>

        <!-- Input Section -->
        <div class="mb-4">
            <label for="prompt-input" class="block text-sm font-medium text-gray-700 mb-2">
                Ask the AI anything:
            </label>
            <textarea id="prompt-input" rows="4" class="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-shadow" placeholder="e.g., What's the latest news on the Artemis program?"></textarea>
        </div>

        <!-- Controls -->
        <div class="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
            <div class="flex items-center">
                <input id="grounding-toggle" type="checkbox" checked class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
                <label for="grounding-toggle" class="ml-2 text-sm text-gray-600">
                    Use Google Search (for current info)
                </label>
            </div>
            <button id="generate-btn" class="w-full sm:w-auto bg-blue-600 text-white font-semibold py-2 px-6 rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed">
                Generate
            </button>
        </div>

        <!-- Output Section -->
        <div id="output-container" class="mt-6">
            <h2 class="text-2xl font-semibold text-gray-800 mb-3">Response:</h2>
            <!-- Loading Spinner -->
            <div id="loading-spinner" class="loader hidden"></div>
            <!-- Error Message -->
            <div id="error-message" class="text-red-600 bg-red-50 p-3 rounded-lg hidden"></div>
            <!-- Response Text -->
            <div id="response-text" class="text-gray-700 bg-gray-50 p-4 rounded-lg min-h-[100px] whitespace-pre-wrap border border-gray-200"></div>
        </div>

        <!-- Sources Section -->
        <div id="sources-container" class="mt-6 hidden">
            <h3 class="text-xl font-semibold text-gray-700 mb-3">Sources:</h3>
            <ul id="sources-list" class="list-disc list-inside text-sm space-y-1">
                <!-- Sources will be dynamically inserted here -->
            </ul>
        </div>

        <!-- Footer with License and Copyright -->
        <footer class="text-center text-xs text-gray-500 mt-8 border-t border-gray-200 pt-6">
            <p class="mb-1">
                Copyright &copy; 2004 Jason Diffin. All rights reserved.
            </p>
            <p>
                Licensed under the Apache License, Version 1.0 (the "License");
                you may not use this file except in compliance with the License.
                You may obtain a copy of the License at
                <a href="http://www.apache.org/licenses/LICENSE-1.0" class="text-blue-500 hover:underline" target="_blank" rel="noopener noreferrer">
                    http://www.apache.org/licenses/LICENSE-1.0
                </a>
            </p>
        </footer>
    </div>

    <!-- JavaScript Logic -->
    <script>
        // Select DOM elements
        const generateBtn = document.getElementById('generate-btn');
        const promptInput = document.getElementById('prompt-input');
        const groundingToggle = document.getElementById('grounding-toggle');
        const responseText = document.getElementById('response-text');
        const loadingSpinner = document.getElementById('loading-spinner');
        const errorMessage = document.getElementById('error-message');
        const sourcesContainer = document.getElementById('sources-container');
        const sourcesList = document.getElementById('sources-list');

        // Add click event listener to the button
        generateBtn.addEventListener('click', handleApiCall);

        /**
         * Handles the API call to the Gemini model
         */
        async function handleApiCall() {
            const prompt = promptInput.value;
            const useGrounding = groundingToggle.checked;
            
            // Do not run if prompt is empty
            if (!prompt.trim()) {
                showError("Please enter a prompt.");
                return;
            }

            // --- 1. Set UI to loading state ---
            setLoadingState(true);
            
            // --- 2. Prepare API request ---
            // As per instructions, apiKey is an empty string.
            const apiKey = ""; 
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${apiKey}`;

            const systemPrompt = "You are a helpful AI assistant. Answer the user's query clearly and concisely.";

            const payload = {
                contents: [{ parts: [{ text: prompt }] }],
                systemInstruction: {
                    parts: [{ text: systemPrompt }]
                },
            };

            // Add grounding tool if the checkbox is checked
            if (useGrounding) {
                payload.tools = [{ "google_search": {} }];
            }

            // --- 3. Make API call with retry logic ---
            try {
                const response = await fetchWithRetry(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    throw new Error(`API error: ${response.status} ${response.statusText}`);
                }

                const result = await response.json();
                
                // --- 4. Process the response ---
                const candidate = result.candidates?.[0];
                const text = candidate?.content?.parts?.[0]?.text;

                if (text) {
                    // Display the generated text
                    responseText.innerText = text; // Use innerText to respect newlines
                    
                    // Process and display grounding sources
                    const groundingMetadata = candidate.groundingMetadata;
                    if (groundingMetadata && groundingMetadata.groundingAttributions) {
                        displaySources(groundingMetadata.groundingAttributions);
                    }
                } else {
                    showError("No content received from the AI. The response might be blocked.");
                }

            } catch (error) {
                console.error("Error during API call:", error);
                showError(`An error occurred: ${error.message}. Check the console for details.`);
            } finally {
                // --- 5. Restore UI from loading state ---
                setLoadingState(false);
            }
        }

        /**
         * Fetches a resource with exponential backoff retry logic.
         * @param {string} url - The URL to fetch.
         * @param {object} options - The options for the fetch call.
         * @param {number} retries - The maximum number of retries.
         * @param {number} delay - The initial delay in ms.
         * @returns {Promise<Response>}
         */
        async function fetchWithRetry(url, options, retries = 3, delay = 1000) {
            for (let i = 0; i < retries; i++) {
                try {
                    const response = await fetch(url, options);
                    // 429 is "Too Many Requests" - a common reason for retry
                    if (response.status === 429) { 
                        throw new Error('Rate limited');
                    }
                    return response; // Success
                } catch (error) {
                    // Don't retry on the last attempt
                    if (i === retries - 1) throw error;
                    // Wait for an exponentially increasing delay
                    await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));
                }
            }
        }

        /**
         * Toggles the UI's loading state
         * @param {boolean} isLoading - Whether to show the loading state
         */
        function setLoadingState(isLoading) {
            if (isLoading) {
                generateBtn.disabled = true;
                loadingSpinner.classList.remove('hidden');
                responseText.innerText = "";
                errorMessage.classList.add('hidden');
                sourcesContainer.classList.add('hidden');
                sourcesList.innerHTML = "";
            } else {
                generateBtn.disabled = false;
                loadingSpinner.classList.add('hidden');
            }
        }

        /**
         * Displays an error message to the user
         * @param {string} message - The error message to display
         */
        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.classList.remove('hidden');
            responseText.innerText = ""; // Clear any previous success text
        }

        /**
         * Displays the list of citation sources
         * @param {Array<object>} sources - The array of grounding attributions
         */
        function displaySources(sources) {
            sourcesList.innerHTML = ""; // Clear previous sources
            
            const validSources = sources
                .map(attr => attr.web)
                .filter(source => source && source.uri && source.title);

            if (validSources.length > 0) {
                validSources.forEach(source => {
                    const li = document.createElement('li');
                    const a = document.createElement('a');
                    a.href = source.uri;
                    a.textContent = source.title;
                    a.target = "_blank";
                    a.rel = "noopener noreferrer";
                    a.className = "text-blue-600 hover:underline";
                    li.appendChild(a);
                    sourcesList.appendChild(li);
                });
                sourcesContainer.classList.remove('hidden');
            }
        }
    </script>
</body>
</html>



